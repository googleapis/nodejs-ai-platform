// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

import * as protos from '../protos/protos';
import * as assert from 'assert';
import * as sinon from 'sinon';
import {SinonStub} from 'sinon';
import {describe, it} from 'mocha';
import * as specialistpoolserviceModule from '../src';

import {PassThrough} from 'stream';

import {protobuf, LROperation, operationsProtos} from 'google-gax';

function generateSampleMessage<T extends object>(instance: T) {
  const filledObject = (instance.constructor as typeof protobuf.Message).toObject(
    instance as protobuf.Message<T>,
    {defaults: true}
  );
  return (instance.constructor as typeof protobuf.Message).fromObject(
    filledObject
  ) as T;
}

function stubSimpleCall<ResponseType>(response?: ResponseType, error?: Error) {
  return error
    ? sinon.stub().rejects(error)
    : sinon.stub().resolves([response]);
}

function stubSimpleCallWithCallback<ResponseType>(
  response?: ResponseType,
  error?: Error
) {
  return error
    ? sinon.stub().callsArgWith(2, error)
    : sinon.stub().callsArgWith(2, null, response);
}

function stubLongRunningCall<ResponseType>(
  response?: ResponseType,
  callError?: Error,
  lroError?: Error
) {
  const innerStub = lroError
    ? sinon.stub().rejects(lroError)
    : sinon.stub().resolves([response]);
  const mockOperation = {
    promise: innerStub,
  };
  return callError
    ? sinon.stub().rejects(callError)
    : sinon.stub().resolves([mockOperation]);
}

function stubLongRunningCallWithCallback<ResponseType>(
  response?: ResponseType,
  callError?: Error,
  lroError?: Error
) {
  const innerStub = lroError
    ? sinon.stub().rejects(lroError)
    : sinon.stub().resolves([response]);
  const mockOperation = {
    promise: innerStub,
  };
  return callError
    ? sinon.stub().callsArgWith(2, callError)
    : sinon.stub().callsArgWith(2, null, mockOperation);
}

function stubPageStreamingCall<ResponseType>(
  responses?: ResponseType[],
  error?: Error
) {
  const pagingStub = sinon.stub();
  if (responses) {
    for (let i = 0; i < responses.length; ++i) {
      pagingStub.onCall(i).callsArgWith(2, null, responses[i]);
    }
  }
  const transformStub = error
    ? sinon.stub().callsArgWith(2, error)
    : pagingStub;
  const mockStream = new PassThrough({
    objectMode: true,
    transform: transformStub,
  });
  // trigger as many responses as needed
  if (responses) {
    for (let i = 0; i < responses.length; ++i) {
      setImmediate(() => {
        mockStream.write({});
      });
    }
    setImmediate(() => {
      mockStream.end();
    });
  } else {
    setImmediate(() => {
      mockStream.write({});
    });
    setImmediate(() => {
      mockStream.end();
    });
  }
  return sinon.stub().returns(mockStream);
}

function stubAsyncIterationCall<ResponseType>(
  responses?: ResponseType[],
  error?: Error
) {
  let counter = 0;
  const asyncIterable = {
    [Symbol.asyncIterator]() {
      return {
        async next() {
          if (error) {
            return Promise.reject(error);
          }
          if (counter >= responses!.length) {
            return Promise.resolve({done: true, value: undefined});
          }
          return Promise.resolve({done: false, value: responses![counter++]});
        },
      };
    },
  };
  return sinon.stub().returns(asyncIterable);
}

describe('v1beta1.SpecialistPoolServiceClient', () => {
  it('has servicePath', () => {
    const servicePath =
      specialistpoolserviceModule.v1beta1.SpecialistPoolServiceClient
        .servicePath;
    assert(servicePath);
  });

  it('has apiEndpoint', () => {
    const apiEndpoint =
      specialistpoolserviceModule.v1beta1.SpecialistPoolServiceClient
        .apiEndpoint;
    assert(apiEndpoint);
  });

  it('has port', () => {
    const port =
      specialistpoolserviceModule.v1beta1.SpecialistPoolServiceClient.port;
    assert(port);
    assert(typeof port === 'number');
  });

  it('should create a client with no option', () => {
    const client = new specialistpoolserviceModule.v1beta1.SpecialistPoolServiceClient();
    assert(client);
  });

  it('should create a client with gRPC fallback', () => {
    const client = new specialistpoolserviceModule.v1beta1.SpecialistPoolServiceClient(
      {
        fallback: true,
      }
    );
    assert(client);
  });

  it('has initialize method and supports deferred initialization', async () => {
    const client = new specialistpoolserviceModule.v1beta1.SpecialistPoolServiceClient(
      {
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      }
    );
    assert.strictEqual(client.specialistPoolServiceStub, undefined);
    await client.initialize();
    assert(client.specialistPoolServiceStub);
  });

  it('has close method', () => {
    const client = new specialistpoolserviceModule.v1beta1.SpecialistPoolServiceClient(
      {
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      }
    );
    client.close();
  });

  it('has getProjectId method', async () => {
    const fakeProjectId = 'fake-project-id';
    const client = new specialistpoolserviceModule.v1beta1.SpecialistPoolServiceClient(
      {
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      }
    );
    client.auth.getProjectId = sinon.stub().resolves(fakeProjectId);
    const result = await client.getProjectId();
    assert.strictEqual(result, fakeProjectId);
    assert((client.auth.getProjectId as SinonStub).calledWithExactly());
  });

  it('has getProjectId method with callback', async () => {
    const fakeProjectId = 'fake-project-id';
    const client = new specialistpoolserviceModule.v1beta1.SpecialistPoolServiceClient(
      {
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      }
    );
    client.auth.getProjectId = sinon
      .stub()
      .callsArgWith(0, null, fakeProjectId);
    const promise = new Promise((resolve, reject) => {
      client.getProjectId((err?: Error | null, projectId?: string | null) => {
        if (err) {
          reject(err);
        } else {
          resolve(projectId);
        }
      });
    });
    const result = await promise;
    assert.strictEqual(result, fakeProjectId);
  });

  describe('getSpecialistPool', () => {
    it('invokes getSpecialistPool without error', async () => {
      const client = new specialistpoolserviceModule.v1beta1.SpecialistPoolServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.aiplatform.v1beta1.GetSpecialistPoolRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.aiplatform.v1beta1.SpecialistPool()
      );
      client.innerApiCalls.getSpecialistPool = stubSimpleCall(expectedResponse);
      const [response] = await client.getSpecialistPool(request);
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.getSpecialistPool as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });

    it('invokes getSpecialistPool without error using callback', async () => {
      const client = new specialistpoolserviceModule.v1beta1.SpecialistPoolServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.aiplatform.v1beta1.GetSpecialistPoolRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.aiplatform.v1beta1.SpecialistPool()
      );
      client.innerApiCalls.getSpecialistPool = stubSimpleCallWithCallback(
        expectedResponse
      );
      const promise = new Promise((resolve, reject) => {
        client.getSpecialistPool(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.aiplatform.v1beta1.ISpecialistPool | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.getSpecialistPool as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions /*, callback defined above */)
      );
    });

    it('invokes getSpecialistPool with error', async () => {
      const client = new specialistpoolserviceModule.v1beta1.SpecialistPoolServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.aiplatform.v1beta1.GetSpecialistPoolRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedError = new Error('expected');
      client.innerApiCalls.getSpecialistPool = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.getSpecialistPool(request), expectedError);
      assert(
        (client.innerApiCalls.getSpecialistPool as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });
  });

  describe('createSpecialistPool', () => {
    it('invokes createSpecialistPool without error', async () => {
      const client = new specialistpoolserviceModule.v1beta1.SpecialistPoolServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.aiplatform.v1beta1.CreateSpecialistPoolRequest()
      );
      request.parent = '';
      const expectedHeaderRequestParams = 'parent=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.createSpecialistPool = stubLongRunningCall(
        expectedResponse
      );
      const [operation] = await client.createSpecialistPool(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.createSpecialistPool as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });

    it('invokes createSpecialistPool without error using callback', async () => {
      const client = new specialistpoolserviceModule.v1beta1.SpecialistPoolServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.aiplatform.v1beta1.CreateSpecialistPoolRequest()
      );
      request.parent = '';
      const expectedHeaderRequestParams = 'parent=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.createSpecialistPool = stubLongRunningCallWithCallback(
        expectedResponse
      );
      const promise = new Promise((resolve, reject) => {
        client.createSpecialistPool(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.aiplatform.v1beta1.ISpecialistPool,
              protos.google.cloud.aiplatform.v1beta1.ICreateSpecialistPoolOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.aiplatform.v1beta1.ISpecialistPool,
        protos.google.cloud.aiplatform.v1beta1.ICreateSpecialistPoolOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.createSpecialistPool as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions /*, callback defined above */)
      );
    });

    it('invokes createSpecialistPool with call error', async () => {
      const client = new specialistpoolserviceModule.v1beta1.SpecialistPoolServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.aiplatform.v1beta1.CreateSpecialistPoolRequest()
      );
      request.parent = '';
      const expectedHeaderRequestParams = 'parent=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedError = new Error('expected');
      client.innerApiCalls.createSpecialistPool = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.createSpecialistPool(request), expectedError);
      assert(
        (client.innerApiCalls.createSpecialistPool as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });

    it('invokes createSpecialistPool with LRO error', async () => {
      const client = new specialistpoolserviceModule.v1beta1.SpecialistPoolServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.aiplatform.v1beta1.CreateSpecialistPoolRequest()
      );
      request.parent = '';
      const expectedHeaderRequestParams = 'parent=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedError = new Error('expected');
      client.innerApiCalls.createSpecialistPool = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.createSpecialistPool(request);
      await assert.rejects(operation.promise(), expectedError);
      assert(
        (client.innerApiCalls.createSpecialistPool as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });

    it('invokes checkCreateSpecialistPoolProgress without error', async () => {
      const client = new specialistpoolserviceModule.v1beta1.SpecialistPoolServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkCreateSpecialistPoolProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkCreateSpecialistPoolProgress with error', async () => {
      const client = new specialistpoolserviceModule.v1beta1.SpecialistPoolServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkCreateSpecialistPoolProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('deleteSpecialistPool', () => {
    it('invokes deleteSpecialistPool without error', async () => {
      const client = new specialistpoolserviceModule.v1beta1.SpecialistPoolServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.aiplatform.v1beta1.DeleteSpecialistPoolRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.deleteSpecialistPool = stubLongRunningCall(
        expectedResponse
      );
      const [operation] = await client.deleteSpecialistPool(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.deleteSpecialistPool as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });

    it('invokes deleteSpecialistPool without error using callback', async () => {
      const client = new specialistpoolserviceModule.v1beta1.SpecialistPoolServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.aiplatform.v1beta1.DeleteSpecialistPoolRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.deleteSpecialistPool = stubLongRunningCallWithCallback(
        expectedResponse
      );
      const promise = new Promise((resolve, reject) => {
        client.deleteSpecialistPool(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.protobuf.IEmpty,
              protos.google.cloud.aiplatform.v1beta1.IDeleteOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.aiplatform.v1beta1.IDeleteOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.deleteSpecialistPool as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions /*, callback defined above */)
      );
    });

    it('invokes deleteSpecialistPool with call error', async () => {
      const client = new specialistpoolserviceModule.v1beta1.SpecialistPoolServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.aiplatform.v1beta1.DeleteSpecialistPoolRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteSpecialistPool = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.deleteSpecialistPool(request), expectedError);
      assert(
        (client.innerApiCalls.deleteSpecialistPool as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });

    it('invokes deleteSpecialistPool with LRO error', async () => {
      const client = new specialistpoolserviceModule.v1beta1.SpecialistPoolServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.aiplatform.v1beta1.DeleteSpecialistPoolRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteSpecialistPool = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.deleteSpecialistPool(request);
      await assert.rejects(operation.promise(), expectedError);
      assert(
        (client.innerApiCalls.deleteSpecialistPool as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });

    it('invokes checkDeleteSpecialistPoolProgress without error', async () => {
      const client = new specialistpoolserviceModule.v1beta1.SpecialistPoolServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkDeleteSpecialistPoolProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkDeleteSpecialistPoolProgress with error', async () => {
      const client = new specialistpoolserviceModule.v1beta1.SpecialistPoolServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkDeleteSpecialistPoolProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('updateSpecialistPool', () => {
    it('invokes updateSpecialistPool without error', async () => {
      const client = new specialistpoolserviceModule.v1beta1.SpecialistPoolServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.aiplatform.v1beta1.UpdateSpecialistPoolRequest()
      );
      request.specialistPool = {};
      request.specialistPool.name = '';
      const expectedHeaderRequestParams = 'specialist_pool.name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.updateSpecialistPool = stubLongRunningCall(
        expectedResponse
      );
      const [operation] = await client.updateSpecialistPool(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.updateSpecialistPool as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });

    it('invokes updateSpecialistPool without error using callback', async () => {
      const client = new specialistpoolserviceModule.v1beta1.SpecialistPoolServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.aiplatform.v1beta1.UpdateSpecialistPoolRequest()
      );
      request.specialistPool = {};
      request.specialistPool.name = '';
      const expectedHeaderRequestParams = 'specialist_pool.name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.updateSpecialistPool = stubLongRunningCallWithCallback(
        expectedResponse
      );
      const promise = new Promise((resolve, reject) => {
        client.updateSpecialistPool(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.aiplatform.v1beta1.ISpecialistPool,
              protos.google.cloud.aiplatform.v1beta1.IUpdateSpecialistPoolOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.aiplatform.v1beta1.ISpecialistPool,
        protos.google.cloud.aiplatform.v1beta1.IUpdateSpecialistPoolOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.updateSpecialistPool as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions /*, callback defined above */)
      );
    });

    it('invokes updateSpecialistPool with call error', async () => {
      const client = new specialistpoolserviceModule.v1beta1.SpecialistPoolServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.aiplatform.v1beta1.UpdateSpecialistPoolRequest()
      );
      request.specialistPool = {};
      request.specialistPool.name = '';
      const expectedHeaderRequestParams = 'specialist_pool.name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedError = new Error('expected');
      client.innerApiCalls.updateSpecialistPool = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.updateSpecialistPool(request), expectedError);
      assert(
        (client.innerApiCalls.updateSpecialistPool as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });

    it('invokes updateSpecialistPool with LRO error', async () => {
      const client = new specialistpoolserviceModule.v1beta1.SpecialistPoolServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.aiplatform.v1beta1.UpdateSpecialistPoolRequest()
      );
      request.specialistPool = {};
      request.specialistPool.name = '';
      const expectedHeaderRequestParams = 'specialist_pool.name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedError = new Error('expected');
      client.innerApiCalls.updateSpecialistPool = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.updateSpecialistPool(request);
      await assert.rejects(operation.promise(), expectedError);
      assert(
        (client.innerApiCalls.updateSpecialistPool as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });

    it('invokes checkUpdateSpecialistPoolProgress without error', async () => {
      const client = new specialistpoolserviceModule.v1beta1.SpecialistPoolServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkUpdateSpecialistPoolProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkUpdateSpecialistPoolProgress with error', async () => {
      const client = new specialistpoolserviceModule.v1beta1.SpecialistPoolServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkUpdateSpecialistPoolProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('listSpecialistPools', () => {
    it('invokes listSpecialistPools without error', async () => {
      const client = new specialistpoolserviceModule.v1beta1.SpecialistPoolServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.aiplatform.v1beta1.ListSpecialistPoolsRequest()
      );
      request.parent = '';
      const expectedHeaderRequestParams = 'parent=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.aiplatform.v1beta1.SpecialistPool()
        ),
        generateSampleMessage(
          new protos.google.cloud.aiplatform.v1beta1.SpecialistPool()
        ),
        generateSampleMessage(
          new protos.google.cloud.aiplatform.v1beta1.SpecialistPool()
        ),
      ];
      client.innerApiCalls.listSpecialistPools = stubSimpleCall(
        expectedResponse
      );
      const [response] = await client.listSpecialistPools(request);
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.listSpecialistPools as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });

    it('invokes listSpecialistPools without error using callback', async () => {
      const client = new specialistpoolserviceModule.v1beta1.SpecialistPoolServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.aiplatform.v1beta1.ListSpecialistPoolsRequest()
      );
      request.parent = '';
      const expectedHeaderRequestParams = 'parent=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.aiplatform.v1beta1.SpecialistPool()
        ),
        generateSampleMessage(
          new protos.google.cloud.aiplatform.v1beta1.SpecialistPool()
        ),
        generateSampleMessage(
          new protos.google.cloud.aiplatform.v1beta1.SpecialistPool()
        ),
      ];
      client.innerApiCalls.listSpecialistPools = stubSimpleCallWithCallback(
        expectedResponse
      );
      const promise = new Promise((resolve, reject) => {
        client.listSpecialistPools(
          request,
          (
            err?: Error | null,
            result?:
              | protos.google.cloud.aiplatform.v1beta1.ISpecialistPool[]
              | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.listSpecialistPools as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions /*, callback defined above */)
      );
    });

    it('invokes listSpecialistPools with error', async () => {
      const client = new specialistpoolserviceModule.v1beta1.SpecialistPoolServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.aiplatform.v1beta1.ListSpecialistPoolsRequest()
      );
      request.parent = '';
      const expectedHeaderRequestParams = 'parent=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedError = new Error('expected');
      client.innerApiCalls.listSpecialistPools = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.listSpecialistPools(request), expectedError);
      assert(
        (client.innerApiCalls.listSpecialistPools as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });

    it('invokes listSpecialistPoolsStream without error', async () => {
      const client = new specialistpoolserviceModule.v1beta1.SpecialistPoolServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.aiplatform.v1beta1.ListSpecialistPoolsRequest()
      );
      request.parent = '';
      const expectedHeaderRequestParams = 'parent=';
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.aiplatform.v1beta1.SpecialistPool()
        ),
        generateSampleMessage(
          new protos.google.cloud.aiplatform.v1beta1.SpecialistPool()
        ),
        generateSampleMessage(
          new protos.google.cloud.aiplatform.v1beta1.SpecialistPool()
        ),
      ];
      client.descriptors.page.listSpecialistPools.createStream = stubPageStreamingCall(
        expectedResponse
      );
      const stream = client.listSpecialistPoolsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.aiplatform.v1beta1.SpecialistPool[] = [];
        stream.on(
          'data',
          (response: protos.google.cloud.aiplatform.v1beta1.SpecialistPool) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (client.descriptors.page.listSpecialistPools.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listSpecialistPools, request)
      );
      assert.strictEqual(
        (client.descriptors.page.listSpecialistPools
          .createStream as SinonStub).getCall(0).args[2].otherArgs.headers[
          'x-goog-request-params'
        ],
        expectedHeaderRequestParams
      );
    });

    it('invokes listSpecialistPoolsStream with error', async () => {
      const client = new specialistpoolserviceModule.v1beta1.SpecialistPoolServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.aiplatform.v1beta1.ListSpecialistPoolsRequest()
      );
      request.parent = '';
      const expectedHeaderRequestParams = 'parent=';
      const expectedError = new Error('expected');
      client.descriptors.page.listSpecialistPools.createStream = stubPageStreamingCall(
        undefined,
        expectedError
      );
      const stream = client.listSpecialistPoolsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.aiplatform.v1beta1.SpecialistPool[] = [];
        stream.on(
          'data',
          (response: protos.google.cloud.aiplatform.v1beta1.SpecialistPool) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (client.descriptors.page.listSpecialistPools.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listSpecialistPools, request)
      );
      assert.strictEqual(
        (client.descriptors.page.listSpecialistPools
          .createStream as SinonStub).getCall(0).args[2].otherArgs.headers[
          'x-goog-request-params'
        ],
        expectedHeaderRequestParams
      );
    });

    it('uses async iteration with listSpecialistPools without error', async () => {
      const client = new specialistpoolserviceModule.v1beta1.SpecialistPoolServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.aiplatform.v1beta1.ListSpecialistPoolsRequest()
      );
      request.parent = '';
      const expectedHeaderRequestParams = 'parent=';
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.aiplatform.v1beta1.SpecialistPool()
        ),
        generateSampleMessage(
          new protos.google.cloud.aiplatform.v1beta1.SpecialistPool()
        ),
        generateSampleMessage(
          new protos.google.cloud.aiplatform.v1beta1.SpecialistPool()
        ),
      ];
      client.descriptors.page.listSpecialistPools.asyncIterate = stubAsyncIterationCall(
        expectedResponse
      );
      const responses: protos.google.cloud.aiplatform.v1beta1.ISpecialistPool[] = [];
      const iterable = client.listSpecialistPoolsAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (client.descriptors.page.listSpecialistPools
          .asyncIterate as SinonStub).getCall(0).args[1],
        request
      );
      assert.strictEqual(
        (client.descriptors.page.listSpecialistPools
          .asyncIterate as SinonStub).getCall(0).args[2].otherArgs.headers[
          'x-goog-request-params'
        ],
        expectedHeaderRequestParams
      );
    });

    it('uses async iteration with listSpecialistPools with error', async () => {
      const client = new specialistpoolserviceModule.v1beta1.SpecialistPoolServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.aiplatform.v1beta1.ListSpecialistPoolsRequest()
      );
      request.parent = '';
      const expectedHeaderRequestParams = 'parent=';
      const expectedError = new Error('expected');
      client.descriptors.page.listSpecialistPools.asyncIterate = stubAsyncIterationCall(
        undefined,
        expectedError
      );
      const iterable = client.listSpecialistPoolsAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.cloud.aiplatform.v1beta1.ISpecialistPool[] = [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (client.descriptors.page.listSpecialistPools
          .asyncIterate as SinonStub).getCall(0).args[1],
        request
      );
      assert.strictEqual(
        (client.descriptors.page.listSpecialistPools
          .asyncIterate as SinonStub).getCall(0).args[2].otherArgs.headers[
          'x-goog-request-params'
        ],
        expectedHeaderRequestParams
      );
    });
  });

  describe('Path templates', () => {
    describe('annotation', () => {
      const fakePath = '/rendered/path/annotation';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        dataset: 'datasetValue',
        data_item: 'dataItemValue',
        annotation: 'annotationValue',
      };
      const client = new specialistpoolserviceModule.v1beta1.SpecialistPoolServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      client.pathTemplates.annotationPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.annotationPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('annotationPath', () => {
        const result = client.annotationPath(
          'projectValue',
          'locationValue',
          'datasetValue',
          'dataItemValue',
          'annotationValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.annotationPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromAnnotationName', () => {
        const result = client.matchProjectFromAnnotationName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.annotationPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromAnnotationName', () => {
        const result = client.matchLocationFromAnnotationName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.annotationPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchDatasetFromAnnotationName', () => {
        const result = client.matchDatasetFromAnnotationName(fakePath);
        assert.strictEqual(result, 'datasetValue');
        assert(
          (client.pathTemplates.annotationPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchDataItemFromAnnotationName', () => {
        const result = client.matchDataItemFromAnnotationName(fakePath);
        assert.strictEqual(result, 'dataItemValue');
        assert(
          (client.pathTemplates.annotationPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchAnnotationFromAnnotationName', () => {
        const result = client.matchAnnotationFromAnnotationName(fakePath);
        assert.strictEqual(result, 'annotationValue');
        assert(
          (client.pathTemplates.annotationPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('annotationSpec', () => {
      const fakePath = '/rendered/path/annotationSpec';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        dataset: 'datasetValue',
        annotation_spec: 'annotationSpecValue',
      };
      const client = new specialistpoolserviceModule.v1beta1.SpecialistPoolServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      client.pathTemplates.annotationSpecPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.annotationSpecPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('annotationSpecPath', () => {
        const result = client.annotationSpecPath(
          'projectValue',
          'locationValue',
          'datasetValue',
          'annotationSpecValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.annotationSpecPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromAnnotationSpecName', () => {
        const result = client.matchProjectFromAnnotationSpecName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.annotationSpecPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromAnnotationSpecName', () => {
        const result = client.matchLocationFromAnnotationSpecName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.annotationSpecPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchDatasetFromAnnotationSpecName', () => {
        const result = client.matchDatasetFromAnnotationSpecName(fakePath);
        assert.strictEqual(result, 'datasetValue');
        assert(
          (client.pathTemplates.annotationSpecPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchAnnotationSpecFromAnnotationSpecName', () => {
        const result = client.matchAnnotationSpecFromAnnotationSpecName(
          fakePath
        );
        assert.strictEqual(result, 'annotationSpecValue');
        assert(
          (client.pathTemplates.annotationSpecPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('batchPredictionJob', () => {
      const fakePath = '/rendered/path/batchPredictionJob';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        batch_prediction_job: 'batchPredictionJobValue',
      };
      const client = new specialistpoolserviceModule.v1beta1.SpecialistPoolServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      client.pathTemplates.batchPredictionJobPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.batchPredictionJobPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('batchPredictionJobPath', () => {
        const result = client.batchPredictionJobPath(
          'projectValue',
          'locationValue',
          'batchPredictionJobValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.batchPredictionJobPathTemplate
            .render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromBatchPredictionJobName', () => {
        const result = client.matchProjectFromBatchPredictionJobName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.batchPredictionJobPathTemplate
            .match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromBatchPredictionJobName', () => {
        const result = client.matchLocationFromBatchPredictionJobName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.batchPredictionJobPathTemplate
            .match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchBatchPredictionJobFromBatchPredictionJobName', () => {
        const result = client.matchBatchPredictionJobFromBatchPredictionJobName(
          fakePath
        );
        assert.strictEqual(result, 'batchPredictionJobValue');
        assert(
          (client.pathTemplates.batchPredictionJobPathTemplate
            .match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('customJob', () => {
      const fakePath = '/rendered/path/customJob';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        custom_job: 'customJobValue',
      };
      const client = new specialistpoolserviceModule.v1beta1.SpecialistPoolServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      client.pathTemplates.customJobPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.customJobPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('customJobPath', () => {
        const result = client.customJobPath(
          'projectValue',
          'locationValue',
          'customJobValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.customJobPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromCustomJobName', () => {
        const result = client.matchProjectFromCustomJobName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.customJobPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromCustomJobName', () => {
        const result = client.matchLocationFromCustomJobName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.customJobPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchCustomJobFromCustomJobName', () => {
        const result = client.matchCustomJobFromCustomJobName(fakePath);
        assert.strictEqual(result, 'customJobValue');
        assert(
          (client.pathTemplates.customJobPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('dataItem', () => {
      const fakePath = '/rendered/path/dataItem';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        dataset: 'datasetValue',
        data_item: 'dataItemValue',
      };
      const client = new specialistpoolserviceModule.v1beta1.SpecialistPoolServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      client.pathTemplates.dataItemPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.dataItemPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('dataItemPath', () => {
        const result = client.dataItemPath(
          'projectValue',
          'locationValue',
          'datasetValue',
          'dataItemValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.dataItemPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromDataItemName', () => {
        const result = client.matchProjectFromDataItemName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.dataItemPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromDataItemName', () => {
        const result = client.matchLocationFromDataItemName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.dataItemPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchDatasetFromDataItemName', () => {
        const result = client.matchDatasetFromDataItemName(fakePath);
        assert.strictEqual(result, 'datasetValue');
        assert(
          (client.pathTemplates.dataItemPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchDataItemFromDataItemName', () => {
        const result = client.matchDataItemFromDataItemName(fakePath);
        assert.strictEqual(result, 'dataItemValue');
        assert(
          (client.pathTemplates.dataItemPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('dataLabelingJob', () => {
      const fakePath = '/rendered/path/dataLabelingJob';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        data_labeling_job: 'dataLabelingJobValue',
      };
      const client = new specialistpoolserviceModule.v1beta1.SpecialistPoolServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      client.pathTemplates.dataLabelingJobPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.dataLabelingJobPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('dataLabelingJobPath', () => {
        const result = client.dataLabelingJobPath(
          'projectValue',
          'locationValue',
          'dataLabelingJobValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.dataLabelingJobPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromDataLabelingJobName', () => {
        const result = client.matchProjectFromDataLabelingJobName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.dataLabelingJobPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromDataLabelingJobName', () => {
        const result = client.matchLocationFromDataLabelingJobName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.dataLabelingJobPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchDataLabelingJobFromDataLabelingJobName', () => {
        const result = client.matchDataLabelingJobFromDataLabelingJobName(
          fakePath
        );
        assert.strictEqual(result, 'dataLabelingJobValue');
        assert(
          (client.pathTemplates.dataLabelingJobPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('dataset', () => {
      const fakePath = '/rendered/path/dataset';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        dataset: 'datasetValue',
      };
      const client = new specialistpoolserviceModule.v1beta1.SpecialistPoolServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      client.pathTemplates.datasetPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.datasetPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('datasetPath', () => {
        const result = client.datasetPath(
          'projectValue',
          'locationValue',
          'datasetValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.datasetPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromDatasetName', () => {
        const result = client.matchProjectFromDatasetName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.datasetPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromDatasetName', () => {
        const result = client.matchLocationFromDatasetName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.datasetPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchDatasetFromDatasetName', () => {
        const result = client.matchDatasetFromDatasetName(fakePath);
        assert.strictEqual(result, 'datasetValue');
        assert(
          (client.pathTemplates.datasetPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('endpoint', () => {
      const fakePath = '/rendered/path/endpoint';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        endpoint: 'endpointValue',
      };
      const client = new specialistpoolserviceModule.v1beta1.SpecialistPoolServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      client.pathTemplates.endpointPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.endpointPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('endpointPath', () => {
        const result = client.endpointPath(
          'projectValue',
          'locationValue',
          'endpointValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.endpointPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromEndpointName', () => {
        const result = client.matchProjectFromEndpointName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.endpointPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromEndpointName', () => {
        const result = client.matchLocationFromEndpointName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.endpointPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchEndpointFromEndpointName', () => {
        const result = client.matchEndpointFromEndpointName(fakePath);
        assert.strictEqual(result, 'endpointValue');
        assert(
          (client.pathTemplates.endpointPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('hyperparameterTuningJob', () => {
      const fakePath = '/rendered/path/hyperparameterTuningJob';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        hyperparameter_tuning_job: 'hyperparameterTuningJobValue',
      };
      const client = new specialistpoolserviceModule.v1beta1.SpecialistPoolServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      client.pathTemplates.hyperparameterTuningJobPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.hyperparameterTuningJobPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('hyperparameterTuningJobPath', () => {
        const result = client.hyperparameterTuningJobPath(
          'projectValue',
          'locationValue',
          'hyperparameterTuningJobValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.hyperparameterTuningJobPathTemplate
            .render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromHyperparameterTuningJobName', () => {
        const result = client.matchProjectFromHyperparameterTuningJobName(
          fakePath
        );
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.hyperparameterTuningJobPathTemplate
            .match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromHyperparameterTuningJobName', () => {
        const result = client.matchLocationFromHyperparameterTuningJobName(
          fakePath
        );
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.hyperparameterTuningJobPathTemplate
            .match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchHyperparameterTuningJobFromHyperparameterTuningJobName', () => {
        const result = client.matchHyperparameterTuningJobFromHyperparameterTuningJobName(
          fakePath
        );
        assert.strictEqual(result, 'hyperparameterTuningJobValue');
        assert(
          (client.pathTemplates.hyperparameterTuningJobPathTemplate
            .match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('location', () => {
      const fakePath = '/rendered/path/location';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
      };
      const client = new specialistpoolserviceModule.v1beta1.SpecialistPoolServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      client.pathTemplates.locationPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.locationPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('locationPath', () => {
        const result = client.locationPath('projectValue', 'locationValue');
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.locationPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromLocationName', () => {
        const result = client.matchProjectFromLocationName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.locationPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromLocationName', () => {
        const result = client.matchLocationFromLocationName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.locationPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('model', () => {
      const fakePath = '/rendered/path/model';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        model: 'modelValue',
      };
      const client = new specialistpoolserviceModule.v1beta1.SpecialistPoolServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      client.pathTemplates.modelPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.modelPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('modelPath', () => {
        const result = client.modelPath(
          'projectValue',
          'locationValue',
          'modelValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.modelPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromModelName', () => {
        const result = client.matchProjectFromModelName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.modelPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromModelName', () => {
        const result = client.matchLocationFromModelName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.modelPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchModelFromModelName', () => {
        const result = client.matchModelFromModelName(fakePath);
        assert.strictEqual(result, 'modelValue');
        assert(
          (client.pathTemplates.modelPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('modelEvaluation', () => {
      const fakePath = '/rendered/path/modelEvaluation';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        model: 'modelValue',
        evaluation: 'evaluationValue',
      };
      const client = new specialistpoolserviceModule.v1beta1.SpecialistPoolServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      client.pathTemplates.modelEvaluationPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.modelEvaluationPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('modelEvaluationPath', () => {
        const result = client.modelEvaluationPath(
          'projectValue',
          'locationValue',
          'modelValue',
          'evaluationValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.modelEvaluationPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromModelEvaluationName', () => {
        const result = client.matchProjectFromModelEvaluationName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.modelEvaluationPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromModelEvaluationName', () => {
        const result = client.matchLocationFromModelEvaluationName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.modelEvaluationPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchModelFromModelEvaluationName', () => {
        const result = client.matchModelFromModelEvaluationName(fakePath);
        assert.strictEqual(result, 'modelValue');
        assert(
          (client.pathTemplates.modelEvaluationPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchEvaluationFromModelEvaluationName', () => {
        const result = client.matchEvaluationFromModelEvaluationName(fakePath);
        assert.strictEqual(result, 'evaluationValue');
        assert(
          (client.pathTemplates.modelEvaluationPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('modelEvaluationSlice', () => {
      const fakePath = '/rendered/path/modelEvaluationSlice';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        model: 'modelValue',
        evaluation: 'evaluationValue',
        slice: 'sliceValue',
      };
      const client = new specialistpoolserviceModule.v1beta1.SpecialistPoolServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      client.pathTemplates.modelEvaluationSlicePathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.modelEvaluationSlicePathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('modelEvaluationSlicePath', () => {
        const result = client.modelEvaluationSlicePath(
          'projectValue',
          'locationValue',
          'modelValue',
          'evaluationValue',
          'sliceValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.modelEvaluationSlicePathTemplate
            .render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromModelEvaluationSliceName', () => {
        const result = client.matchProjectFromModelEvaluationSliceName(
          fakePath
        );
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.modelEvaluationSlicePathTemplate
            .match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromModelEvaluationSliceName', () => {
        const result = client.matchLocationFromModelEvaluationSliceName(
          fakePath
        );
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.modelEvaluationSlicePathTemplate
            .match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchModelFromModelEvaluationSliceName', () => {
        const result = client.matchModelFromModelEvaluationSliceName(fakePath);
        assert.strictEqual(result, 'modelValue');
        assert(
          (client.pathTemplates.modelEvaluationSlicePathTemplate
            .match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchEvaluationFromModelEvaluationSliceName', () => {
        const result = client.matchEvaluationFromModelEvaluationSliceName(
          fakePath
        );
        assert.strictEqual(result, 'evaluationValue');
        assert(
          (client.pathTemplates.modelEvaluationSlicePathTemplate
            .match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchSliceFromModelEvaluationSliceName', () => {
        const result = client.matchSliceFromModelEvaluationSliceName(fakePath);
        assert.strictEqual(result, 'sliceValue');
        assert(
          (client.pathTemplates.modelEvaluationSlicePathTemplate
            .match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('specialistPool', () => {
      const fakePath = '/rendered/path/specialistPool';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        specialist_pool: 'specialistPoolValue',
      };
      const client = new specialistpoolserviceModule.v1beta1.SpecialistPoolServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      client.pathTemplates.specialistPoolPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.specialistPoolPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('specialistPoolPath', () => {
        const result = client.specialistPoolPath(
          'projectValue',
          'locationValue',
          'specialistPoolValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.specialistPoolPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromSpecialistPoolName', () => {
        const result = client.matchProjectFromSpecialistPoolName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.specialistPoolPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromSpecialistPoolName', () => {
        const result = client.matchLocationFromSpecialistPoolName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.specialistPoolPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchSpecialistPoolFromSpecialistPoolName', () => {
        const result = client.matchSpecialistPoolFromSpecialistPoolName(
          fakePath
        );
        assert.strictEqual(result, 'specialistPoolValue');
        assert(
          (client.pathTemplates.specialistPoolPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('trainingPipeline', () => {
      const fakePath = '/rendered/path/trainingPipeline';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        training_pipeline: 'trainingPipelineValue',
      };
      const client = new specialistpoolserviceModule.v1beta1.SpecialistPoolServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      client.pathTemplates.trainingPipelinePathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.trainingPipelinePathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('trainingPipelinePath', () => {
        const result = client.trainingPipelinePath(
          'projectValue',
          'locationValue',
          'trainingPipelineValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.trainingPipelinePathTemplate
            .render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromTrainingPipelineName', () => {
        const result = client.matchProjectFromTrainingPipelineName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.trainingPipelinePathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromTrainingPipelineName', () => {
        const result = client.matchLocationFromTrainingPipelineName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.trainingPipelinePathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchTrainingPipelineFromTrainingPipelineName', () => {
        const result = client.matchTrainingPipelineFromTrainingPipelineName(
          fakePath
        );
        assert.strictEqual(result, 'trainingPipelineValue');
        assert(
          (client.pathTemplates.trainingPipelinePathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });
  });
});
